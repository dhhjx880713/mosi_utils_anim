__author__ = 'hadu01'
import os
import sys
import numpy as np

ROOTDIR = os.sep.join(['..'] * 3)
import json

sys.path.append(ROOTDIR + os.sep)
TESTPATH = ROOTDIR + os.sep + r'construction/fpca'
TESTLIBPATH = ROOTDIR + os.sep + 'test/'
sys.path.append(TESTPATH)
sys.path.append(TESTLIBPATH)
from FPCA_temporal_data import FPCATemporalData

TEST_DATA_PATH = ROOTDIR + os.sep + \
                 r'../test_data/constrction/fpca'
from libtest import params, pytest_generate_tests


class TestFPCATemporalData(object):
    def setup_class(self):
        with open(TEST_DATA_PATH + os.sep + 'timewarping.json', 'rb') as infile:
            test_data = json.load(infile)
        self.fpca_temporal = FPCATemporalData(test_data, 8, 3)

    param_z_t_transform = [{'res': {'filename': 'pick_010_4_firstLeftHand_572_649_mirrored.bvh',
                                    'data': [0., 0., -4.60517019, -0.01005034, -4.60517019, -0.01005034,
                                             -4.60517019, -0.01005034, -4.60517019, -0.01005034, -4.60517019,
                                             -0.01005034,
                                             -4.60517019, -0.01005034, -4.60517019, -0.01005034, -4.60517019,
                                             -0.01005034,
                                             -4.60517019, -0.01005034, -4.60517019, -0.01005034, -4.60517019,
                                             -0.01005034,
                                             -4.60517019, -0.01005034, -4.60517019, -0.01005034, -4.60517019,
                                             -0.01005034,
                                             -4.60517019, -0.01005034, -4.60517019, -0.01005034, -4.60517019,
                                             -0.01005034,
                                             -4.60517019, -0.01005034, -4.60517019, -0.01005034, -4.60517019,
                                             -0.01005034,
                                             -4.60517019, -0.01005034, -4.60517019, -0.01005034, -4.60517019,
                                             -0.01005034,
                                             -4.60517019, -0.01005034, -4.60517019, -0.01005034, -4.60517019,
                                             -0.01005034,
                                             0., 0., 0., 0., 0., 0., 0.,
                                             0., 0., 0., 0., 0., 0., 0.,
                                             0., 0., 0., 0., 0., 0., 0.,
                                             0., 0., 0., 0., 0., 0., 0.,
                                             0., 0., 0., 0., 0., 0., 0.,
                                             0., 0., 0., 0., 0., 0., 0.,
                                             0., 0., 0., 0., 0., 0., 0.]}}]

    @params(param_z_t_transform)
    def test_z_t_transform(self, res):
        self.fpca_temporal._z_t_transform()
        z_t = self.fpca_temporal.z_t_transform_data[res['filename']]
        for i in xrange(len(z_t)):
            assert round(z_t[i], 3) == round((res['data'][i]), 3)

    param_get_monotonic_indices = [{'indices': [0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11,
                                                12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20,
                                                21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 28, 29, 30, 31, 32,
                                                33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
                                                51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
                                                69, 70, 71, 72, 73, 74, 75, 76],
                                    'res': [0.0, 1.0, 1.01, 2.0, 2.0099999999999998, 3.0, 3.0099999999999998, 4.0,
                                            4.0099999999999998, 5.0, 5.0099999999999998, 6.0, 6.0099999999999998, 7.0,
                                            7.0099999999999998, 8.0, 8.0099999999999998, 9.0, 9.0099999999999998, 10.0,
                                            10.01, 11.0, 11.01, 12.0, 12.01, 13.0, 13.01, 14.0, 14.01, 15.0, 15.01,
                                            16.0, 16.010000000000002, 17.0, 17.010000000000002, 18.0,
                                            18.010000000000002, 19.0, 19.010000000000002, 20.0, 20.010000000000002,
                                            21.0, 21.010000000000002, 22.0, 22.010000000000002, 23.0,
                                            23.010000000000002, 24.0, 24.010000000000002, 25.0, 25.010000000000002,
                                            26.0, 26.010000000000002, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0,
                                            35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0,
                                            47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0,
                                            59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0,
                                            71.0, 72.0, 73.0, 74.0, 75.0, 76.0]}]

    @params(param_get_monotonic_indices)
    def test_get_monotonic_indices(self, indices, res):
        shifted_indices = self.fpca_temporal._get_monotonic_indices(indices)
        for i in xrange(len(res)):
            assert round(shifted_indices[i], 5) == round(res[i], 5)

    param_is_strict_increasing = [{'indices': [0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11,
                                                12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20,
                                                21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 28, 29, 30, 31, 32,
                                                33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
                                                51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
                                                69, 70, 71, 72, 73, 74, 75, 76],
                                  'res': False},
                                 {'indices': [0.0, 1.0, 1.01, 2.0, 2.0099999999999998, 3.0, 3.0099999999999998, 4.0,
                                            4.0099999999999998, 5.0, 5.0099999999999998, 6.0, 6.0099999999999998, 7.0,
                                            7.0099999999999998, 8.0, 8.0099999999999998, 9.0, 9.0099999999999998, 10.0,
                                            10.01, 11.0, 11.01, 12.0, 12.01, 13.0, 13.01, 14.0, 14.01, 15.0, 15.01,
                                            16.0, 16.010000000000002, 17.0, 17.010000000000002, 18.0,
                                            18.010000000000002, 19.0, 19.010000000000002, 20.0, 20.010000000000002,
                                            21.0, 21.010000000000002, 22.0, 22.010000000000002, 23.0,
                                            23.010000000000002, 24.0, 24.010000000000002, 25.0, 25.010000000000002,
                                            26.0, 26.010000000000002, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0, 34.0,
                                            35.0, 36.0, 37.0, 38.0, 39.0, 40.0, 41.0, 42.0, 43.0, 44.0, 45.0, 46.0,
                                            47.0, 48.0, 49.0, 50.0, 51.0, 52.0, 53.0, 54.0, 55.0, 56.0, 57.0, 58.0,
                                            59.0, 60.0, 61.0, 62.0, 63.0, 64.0, 65.0, 66.0, 67.0, 68.0, 69.0, 70.0,
                                            71.0, 72.0, 73.0, 74.0, 75.0, 76.0],
                                  'res': True}]

    @params(param_is_strict_increasing)
    def test_is_strict_increasing(self, indices, res):
        assert self.fpca_temporal._is_strict_increasing(indices) == res

    param_fpca_on_temporal_data = [{'res': (29, 3)}]

    @params(param_fpca_on_temporal_data)
    def test_fpca_on_temporal_data(self, res):
        self.fpca_temporal.fpca_on_temporal_data()

        scores = np.asarray(self.fpca_temporal.temporal_pcaobj[self.fpca_temporal.temporal_pcaobj.names.index('scores')])
        assert scores.shape == res