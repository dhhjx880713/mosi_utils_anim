__author__ = 'erhe01'

import numpy as np
from ...utilities.io_helper_functions import load_json_file

class MGInputFileReader(object):
    """Implements functions used for the processing of the constraints from the input file
    generated by CNL processing.

    Parameters
    ----------
    * mg_input_file : file path or json data read from a file
        Contains elementary action list with constraints, start pose and keyframe annotations.
    """
    def __init__(self, mg_input_file):
        self.mg_input_file = mg_input_file
        self.elementary_action_list = []
        self.keyframe_annotations = []
        if type(mg_input_file) != dict:
            self.mg_input_file = load_json_file(mg_input_file)
        else:
            self.mg_input_file = mg_input_file
        self._extract_elementary_actions()

    def _extract_elementary_actions(self):
        if "elementaryActions" in self.mg_input_file.keys():
            self.elementary_action_list = self.mg_input_file["elementaryActions"]
        elif "tasks" in self.mg_input_file.keys():
            self.elementary_action_list = []
            for task in self.mg_input_file["tasks"]:
                if "elementaryActions" in task.keys():
                    self.elementary_action_list += task["elementaryActions"]
        self.keyframe_annotations = self._extract_keyframe_annotations(self.elementary_action_list)

    def get_number_of_actions(self):
        return len(self.elementary_action_list)

    def get_start_pose(self):
        start_pose = dict()
        start_pose["orientation"] = self._transform_point_from_cad_to_opengl_cs(self.mg_input_file["startPose"]["orientation"])
        start_pose["position"] = self._transform_point_from_cad_to_opengl_cs(self.mg_input_file["startPose"]["position"])
        return start_pose

    def get_elementary_action_name(self, action_index):
        return self.elementary_action_list[action_index]["action"]

    def get_ordered_keyframe_constraints(self, action_index, node_group):
        """
        Returns
        -------
        reordered_constraints: dict of lists
        dict of constraints lists applicable to a specific motion primitive of the node_group
        """
        keyframe_constraints = self._extract_all_keyframe_constraints(self.elementary_action_list[action_index]["constraints"], node_group)
        return self._reorder_keyframe_constraints_for_motion_primitves(node_group, keyframe_constraints)

    def get_trajectory_from_constraint_list(self, action_index, joint_name, scale_factor=1.0):
        """ Extract the trajectory information from the constraint list
        Returns:
        -------
        * control_points: list of dict
            Constraint definition that contains a list of control points.
        * unconstrained_indices : list
        \t List of indices of unconstrained dimensions
        """
        trajectory_constraint_desc = self._extract_trajectory_constraint_desc(self.elementary_action_list[action_index]["constraints"], joint_name)
        if trajectory_constraint_desc is not None:
            #extract unconstrained dimensions
            unconstrained_indices = []
            idx = 0
            for v in trajectory_constraint_desc[0]["position"]:
                if v is None:
                    unconstrained_indices.append(idx)
                idx += 1
            unconstrained_indices = self._transform_unconstrained_indices_from_cad_to_opengl_cs(unconstrained_indices)
            control_points = []
            for c in trajectory_constraint_desc:
                #where the c["position"] is None set it to 0
                point = [p*scale_factor if p is not None else 0 for p in c["position"]]
                point = self._transform_point_from_cad_to_opengl_cs(point)
                control_points.append(point)
            return control_points, unconstrained_indices
        return None, None

    def _extract_keyframe_annotations(self, elementary_action_list):
        """
        Returns
        ------
        * keyframe_annotations : a list of dicts
          Contains for every elementary action a dict that associates of events/actions with certain keyframes
        """
        keyframe_annotations = []
        for entry in elementary_action_list:
            if "keyframeAnnotations" in entry.keys():
                annotations = {}

                for annotation in entry["keyframeAnnotations"]:
                    key = annotation["keyframe"]
                    annotations[key] = annotation
                keyframe_annotations.append(annotations)
            else:
                keyframe_annotations.append({})
        return keyframe_annotations

    def get_keyframe_annotations(self, action_index):
            """
            Returns
            ------
            * keyframe_annotations : a list of dicts
              Contains for every elementary action a dict that associates of events/actions with certain keyframes
            """
            if "keyframeAnnotations" in self.elementary_action_list[action_index].keys():
                annotations = {}
                for annotation in self.elementary_action_list[action_index]["keyframeAnnotations"]:
                    keyframe_label = annotation["keyframe"]
                    annotations[keyframe_label] = annotation
                return annotations
            else:
                return dict()

    def _reorder_keyframe_constraints_for_motion_primitves(self, node_group, keyframe_constraints):
         """ Order constraints extracted by _extract_all_keyframe_constraints for each state

         Returns
         -------
         reordered_constraints: dict of lists
         """
         reordered_constraints = {}
         #iterate over keyframe labels
         for keyframe_label in keyframe_constraints.keys():
            motion_primitive_name = node_group.label_to_motion_primitive_map[keyframe_label]
            time_information = node_group.motion_primitive_annotations[motion_primitive_name][keyframe_label]
            reordered_constraints[motion_primitive_name] = []
            # iterate over joints constrained at that keyframe
            for joint_name in keyframe_constraints[keyframe_label].keys():
                # iterate over constraints for that joint
                for keyframe_constraint in keyframe_constraints[keyframe_label][joint_name]:
                    # create constraint definition usable by the algorithm
                    # and add it to the list of constraints for that state
                    constraint_desc = self._create_keyframe_constraint(keyframe_label, joint_name, keyframe_constraint, time_information)
                    reordered_constraints[motion_primitive_name].append(constraint_desc)
         return reordered_constraints

    def _extract_keyframe_constraints_for_label(self, input_constraint_list, label):
        """ Returns the constraints associated with the given label. Ordered
            based on joint names.
        Returns
        ------
        * key_constraints : dict of lists
        \t contains the list of the constrained joints
        """
        key_constraints = {}
        for constraint in input_constraint_list:
            joint_name = constraint["joint"]
            if "keyframeConstraints" in constraint.keys():
                key_constraints[joint_name] = []
                for constraint_definition in constraint["keyframeConstraints"]:
                    print "read constraint", constraint_definition, joint_name
                    if self._constraint_definition_has_label(constraint_definition, label):
                        key_constraints[joint_name].append(constraint_definition)
        return key_constraints

    def _extract_all_keyframe_constraints(self, constraint_list, node_group):
        """Orders the keyframe constraint for the labels found in the metainformation of
           the elementary actions based on labels as keys
        Returns
        -------
        * keyframe_constraints : dict of dict of lists
          Lists of constraints for each motion primitive in the subgraph.
          access as keyframe_constraints["label"]["joint"][index]
        """
        keyframe_constraints = {}
        annotations = node_group.label_to_motion_primitive_map.keys()
        for label in annotations:
            # print "extract constraints for annotation",label
            keyframe_constraints[label] = self._extract_keyframe_constraints_for_label(constraint_list, label)
            #key_frame_constraints = extract_keyframe_constraints(constraints,annotion)
        return keyframe_constraints

    def _extract_trajectory_constraint_desc(self, input_constraint_list, joint_name):
        """Returns a single trajectory constraint definition for joint joint out of a elementary action constraint list
        """
        for c in input_constraint_list:
            if joint_name == c["joint"]:
                if "trajectoryConstraints" in c.keys():
                    return c["trajectoryConstraints"]
        return None

    def _create_keyframe_constraint(self, keyframe_label, joint_name, constraint, time_information):
        """ Creates a dict containing all properties stated explicitly or implicitly in the input constraint
        Parameters
        ----------
        * keyframe_label : string
          keyframe label
        * joint_name : string
          Name of the joint
        * constraint : dict
          Read from json input file
        * time_information : string
          Time information corresponding to an annotation read from morphable graph meta information

         Returns
         -------
         *constraint_desc : dict
          Contains the keys joint, position, orientation, time, semanticAnnotation
        """
        position = [None, None, None]
        orientation = [None, None, None]
        first_frame = None
        last_frame = None
        time = None
        if "position" in constraint.keys():
             position = constraint["position"]
        if "orientation" in constraint.keys():
            orientation = constraint["orientation"]
        if "time" in constraint.keys():
            time = constraint["time"]
        #check if last or fist frame from annotation
        position = self._transform_point_from_cad_to_opengl_cs(position)
        if time_information == "lastFrame":
            last_frame = True
        elif time_information == "firstFrame":
            first_frame = True
        if "semanticAnnotation" in constraint.keys():
            semantic_annotation = constraint["semanticAnnotation"]
        else:
            semantic_annotation = {}
        semantic_annotation["firstFrame"] = first_frame
        semantic_annotation["lastFrame"] = last_frame
        semantic_annotation["keyframeLabel"] = keyframe_label
        constraint_desc = {"joint": joint_name,
                           "position": position,
                           "orientation": orientation,
                           "time": time,
                           "semanticAnnotation": semantic_annotation}
        return constraint_desc

    def _constraint_definition_has_label(self, constraint_definition, label):
        """ Checks if the label is in the semantic annotation dict of a constraint
        """
        if "semanticAnnotation" in constraint_definition.keys():
            annotation = constraint_definition["semanticAnnotation"]
            #print "semantic Annotation",annotation
            if label in annotation.keys():
                return True
        return False

    def _transform_point_from_cad_to_opengl_cs(self, point):
        """ Transforms a 3d point represented as a list from a left handed cad to a
            right handed opengl coordinate system
        """
        transform_matrix = np.array([[1, 0, 0], [0, 0, 1], [0, -1, 0]])
        return np.dot(transform_matrix, point).tolist()

    def _transform_unconstrained_indices_from_cad_to_opengl_cs(self, indices):
        """ Transforms a list indicating unconstrained dimensions from cad to opengl
            coordinate system.
        """
        new_indices = []
        for i in indices:
            if i == 0:
                new_indices.append(0)
            elif i == 1:
                new_indices.append(2)
            elif i == 2:
                new_indices.append(1)
        return new_indices
