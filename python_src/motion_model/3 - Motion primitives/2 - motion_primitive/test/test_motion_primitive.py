# -*- coding: utf-8 -*-
"""
Created on Tue Jan 27 11:42:34 2015

@author: erhe01

All Unittests for the MotionPrimitive class
"""


import os
import sys
from libtest import params, pytest_generate_tests
import rpy2.robjects as robjects
import numpy as np

TESTPATH = os.sep.join(os.path.realpath(__file__).split(os.sep)[:-1]) + os.sep
sys.path.insert(1, TESTPATH)
sys.path.insert(1, TESTPATH + (os.sep + os.pardir))

from motion_primitive import MotionPrimitive 
  
class TestMotionPrimitive(object):
    """MotionPrimitive test class"""

    def setup_method(self, method):
        testfile =  'walk_leftStance_quaternion_mm.json'
        self.mp =  MotionPrimitive(testfile)
        self.number_of_samples = 1000

    def test_init(self):
        """ Test if MotionPrimitive has been correctly initialized """

        assert "eigen_vectors" in self.mp.s_pca.keys() and "eigen_vectors" \
                                                        in self.mp.t_pca.keys()
                                                        
        assert len(self.mp.gmm.means_[0]) == len(self.mp.s_pca["eigen_vectors"])\
                                            +len(self.mp.t_pca["eigen_vectors"].T)

    def test_inverse_spatial_pca_shape(self):
        """ Test if the inverse spatial pca produces an array with the expected
            shape from a random sample
        """
        sample = np.ravel(self.mp.gmm.sample())
        alpha = sample[:len(self.mp.s_pca["eigen_vectors"])]
        coefs = self.mp._inverse_spatial_pca(alpha)
        assert not np.isnan(coefs).any()
        assert coefs.shape == (self.mp.s_pca["n_basis"],1,self.mp.s_pca["n_dim"])
        
        
        
    param_inverse_spatial_pca = [{"alpha": [2.65058291 ,-0.04948114, -0.10899157, \
                                            -0.23911915, -0.6451217,  -0.1284749 ]}]
    @params(param_inverse_spatial_pca)
    def test_inverse_spatial_pca_result(self,alpha):
        """ Test if the inverse spatial pca produces the expected result
        """
        coefs = self.mp._inverse_spatial_pca(np.array(alpha)).tolist()
        assert coefs == [[[-0.0015218179437774943, 89.98669521214917, -0.09850152392570506, 0.004766109245803858, 0.6940605309691541, 0.7165771951486728, 0.031089702776925184, 0.9991160770563614, -0.02188916226177341, 0.009175128498301236, 0.012817272138717825, 1.0000000000000002, -6.770825908057469e-10, -9.992437207982491e-10, 2.204417826465986e-10, 0.9800406657115639, -0.03256603157208021, -0.19109658516895073, 0.03455799956977277, 0.9948355951527761, -0.018812761556248066, 0.09816956242872334, 0.00015654631585194229, -0.1568958233349681, -0.5862706988937559, 0.8385670811076487, 0.05043473138970342, 0.8431978213916105, 0.37286089850980225, 0.15621780937860635, 0.34820954158326656, 0.927347701869391, 1.4649352150112409e-06, 0.3656876419875088, 4.984925328260245e-07, -0.7093673244820368, 0.7319452991043638, 0.016530308258880206, 0.04495365926638961, -0.17411830759038344, 0.5502464535497521, 0.8175303659582237, 0.00024275986822060863, 0.839172760073805, -0.39000987818475485, 0.07083718914642137, -0.3623372172872914, 0.9463439385855453, 1.0159065949176976e-06, 0.31826300185589285, 3.0967199820658105e-07, 0.5630196043247068, 0.8234408775464104, 0.019036205418770977, 0.01275090749631863, -0.0752849941199891, -0.07138311548115521, -0.16941709390638943, 0.9782888553472122, 0.967367390955298, -2.5490855299011607e-09, 0.23611636346636233, 3.8544582215818686e-08, 0.9811531308898466, 0.03391334072963152, -0.15758401473733105, -0.02506710353457762, -0.026719780911723542, 0.1357085287959965, 0.12921433054890494, 0.9785505883882587, 0.988915721084324, -8.106279857159877e-10, 0.1413348503808335, 2.2921928840811664e-08, 0.9949579036829265, 0.03309155631913263, -0.06517516736725812, -0.02260750740474153]], [[1.164123787866813, 90.54172057115956, -4.743394092039357, 0.011086638775879933, 0.6937554831287454, 0.7165370071149544, 0.03665141518460397, 0.9990440189590304, -0.01990075301415532, 0.01153847602996155, 0.020666560110978185, 0.9999999999999999, -1.6548624653197265e-10, 1.932644575034097e-11, -1.9678081981957115e-10, 0.9802776819460813, -0.029829539369234256, -0.19061145575965197, 0.03209618499230424, 0.995425528723157, -0.018536245284703948, 0.09104235480690345, -0.0018873472405509448, -0.1535889478868984, -0.5871370854792309, 0.8386663242219257, 0.05025083698242311, 0.8356367562502245, 0.37862561276767426, 0.15366651821471528, 0.3606501168790812, 0.931754441176729, 9.197984351436322e-07, 0.3573099526294386, 2.989278084448065e-07, -0.7028906814631644, 0.7371459472529922, 0.027799168255063567, 0.042093721194813326, -0.17677026495499698, 0.5501516518115812, 0.8169142756832938, -0.001309214142734702, 0.8364744993262643, -0.39252513448748, 0.07193736187272846, -0.365409906110584, 0.9492565904662603, 9.737323717925297e-07, 0.3109171509509041, 2.9263699725447127e-07, 0.5566601535961337, 0.8279981194803372, 0.011790200078693275, 0.011507791505974842, -0.09250693570743589, -0.03407468285914634, -0.1682022095134463, 0.9805436596489889, 0.9614191606062439, -4.334851071348445e-09, 0.3115906052274064, 5.0077845623287355e-08, 0.9906632177636636, 0.05789154357361293, -0.03418579851861847, -0.0001602544328152683, -0.027082348232074803, 0.12498449154964508, 0.13029135054632168, 0.9795193347338459, 0.9846857829608741, 3.0024443830295894e-09, 0.16456265391837224, 2.7558220745334286e-08, 0.9955714102182034, 0.022162271260968893, -0.06781478771774849, -0.024379952731862588]], [[3.7878657387711594, 90.40054925080288, -12.676932332048645, 0.008900937471439392, 0.6906373558710923, 0.7173727997683672, 0.0562548455828929, 0.9991899286972602, -0.009870544753725737, 0.003500635445444754, 0.027770742755041194, 1.0000000000000002, -6.944040931910416e-10, -2.507509125850427e-09, 1.567681550098846e-10, 0.979847775047302, -0.024408848496039845, -0.19497539329939723, 0.03328560533670236, 0.9957731417688446, -0.023226510879082507, 0.08805578353969298, 0.004815822657259428, -0.14763897291798492, -0.5877935818364981, 0.8391456138847636, 0.05366014992116831, 0.8247497786557623, 0.3931836454757537, 0.15227457620163692, 0.37161097953757943, 0.9330568978333378, 3.603226608267756e-07, 0.3575921760962528, 1.1310184695975421e-07, -0.7217210817820698, 0.7196716830596778, 0.06149245547335644, 0.01125927722843812, -0.18512325261412482, 0.5502771628049036, 0.8147100434324047, 0.00481323249610207, 0.8421376837644741, -0.3944002569596694, 0.07482307894111596, -0.34826858567988744, 0.9440577103913035, 9.643199290826838e-07, 0.3273948668775733, 2.856899292560074e-07, 0.5757322706874203, 0.8162199484216442, 0.02024767176737379, 0.012914548096380006, -0.11820485779561904, 0.07893340116048944, -0.14992155390169362, 0.9825690667428318, 0.8499132543220208, -1.4283691969706734e-09, 0.5204297019491768, 8.415683938523562e-08, 0.9902277540652487, 0.01006361308462595, 0.0021707117894223284, 0.09472145085677082, -0.03808561047132923, 0.06478835429424648, 0.116527280897269, 0.988611022835216, 0.9809487723096534, -8.823434726954429e-10, 0.1827167316217098, 3.047242261473794e-08, 0.9912069843180866, 0.02375760866831763, -0.12324956734116813, -0.03423416865424972]], [[6.738853633134118, 92.01395517083007, -22.513821896449816, 0.04672203397034817, 0.7066689103211522, 0.6928869734895743, 0.09868239921837671, 0.9994913239213947, 0.014547895818960023, -0.004981426329580832, 0.014310662139168689, 0.9999999999999999, -1.2997924890431893e-09, -6.26445286539502e-11, -2.2760194068260692e-10, 0.9795781003702408, -0.007228345809503142, -0.19774964059297348, 0.003511014663654652, 0.9958732281392193, -0.024386575666642648, 0.08662224629265133, 0.0032211508044581796, -0.1423788105770153, -0.5892816773644763, 0.8388304690240658, 0.056495576161122316, 0.8239385582563834, 0.39264528897919304, 0.1412142594039177, 0.3772477391349853, 0.9308135923729959, 6.615057474931882e-07, 0.36546277092686014, 2.016347093903108e-07, -0.7040819356808901, 0.7402479377975398, 0.038728989899327035, 0.025372019172118933, -0.1940996858629874, 0.5514501838950002, 0.8111429885658807, 0.0017943692244297635, 0.8522730390662133, -0.3816679105051988, 0.0921189515904175, -0.3372692904593758, 0.9305052854948423, 1.858885652356368e-06, 0.3631554986153659, 6.421986652477272e-07, 0.5560871064248728, 0.8236258942908207, 0.0693595317362673, 0.04281523832433985, -0.03622518356355734, 0.18243639882331325, -0.13095323453502278, 0.9735686059954433, 0.9135946310913092, -1.0486587560109976e-09, 0.4304702591763771, 7.040935290090866e-08, 0.9920258873633279, 0.014697547677670716, -0.11735195915195465, 0.036939148741375424, -0.006552969793585981, -0.02760974136497865, 0.10720575605741157, 0.9939540454792554, 0.9927358053325411, -8.196615649823856e-10, 0.1213100914435517, 1.842940171657853e-08, 0.9889618301205262, -0.02379345003780437, -0.1379877614195389, -0.020908262637680277]], [[9.110967467923148, 90.01327204930547, -34.018472115474836, 0.07397100009530329, 0.6938342956916732, 0.6932741219834538, 0.11281712912289417, 0.9991882800363309, 0.01617241073874882, 0.007993647134558616, 0.020494236052439385, 1.0000000000000002, -2.2406752433121156e-09, -1.5741352749522583e-09, -2.017802913316503e-10, 0.978951803038293, -0.0023198166369416476, -0.19911805367035038, -0.007867723596600446, 0.9951879505672492, -0.019832399012104155, 0.09422673066865704, 0.0012927178173701946, -0.1432695621189648, -0.5891398698454546, 0.8393340718080095, 0.052399514328619196, 0.8220637734079522, 0.3972955262579251, 0.1396798825050905, 0.37477407430787674, 0.9368749786508367, 6.527145043553574e-07, 0.349762462922248, 2.0450670174307865e-07, -0.7031928413486676, 0.7401715103286464, 0.05134823681337178, 0.015809733350718436, -0.18913383936732905, 0.5515995190249678, 0.8116544714663589, 0.001086935237992595, 0.8530725680281322, -0.38766924710409284, 0.09113334757877936, -0.3334788494110026, 0.9173443946443318, 2.8760014055350775e-06, 0.3918981554355875, 1.2028437267892854e-06, 0.56469279370746, 0.8148168213793021, 0.07997918247653536, 0.04163340260936549, 0.00877490024839361, 0.16832496469566866, -0.1415163687345526, 0.972924496022243, 1.0122695089109683, 1.1136614314595608e-09, 0.0856139316098581, 1.4123817764075787e-08, 0.9916871456974503, 0.0439209915186028, -0.08975489869385905, -0.05351997428803905, -0.007155974599613145, -0.11125044448270621, 0.10967683523103942, 0.9871180276790519, 0.9978370701503542, 3.00620432007917e-09, 0.07385031623254572, 1.3406078992360752e-08, 0.9817731051109192, -0.05149255457306442, -0.18019142874874416, -0.01066252607884622]], [[10.900989680981736, 88.8911881780415, -42.99033977422653, 0.09158518461342428, 0.6851435032659042, 0.6928372197632056, 0.13416957141854824, 0.9991295275691391, 0.019022886127324903, 0.01639517847598417, 0.013614003873621192, 0.9999999999999998, 2.7508918779866646e-10, -5.226678430408862e-10, -1.463422756686871e-10, 0.9780087344444687, 0.005144045869242893, -0.20358231198166069, -0.004491973956117603, 0.9951391261004452, -0.015579573540336736, 0.09083339559972371, -0.0017297353758546005, -0.14633154751077637, -0.5854999456229824, 0.8413700540066328, 0.05446322519633241, 0.8251123549498803, 0.39268605509483673, 0.13677676795245913, 0.37361116723316257, 0.9428112625468531, 7.723008166658692e-07, 0.3327828547088815, 2.419869963591526e-07, -0.7094454485627667, 0.7329457522235036, 0.05738241153504915, 0.00921831173540948, -0.1839887495290978, 0.5503423278239699, 0.8133887946382833, -0.0029540172872065777, 0.8498722514501768, -0.385660226304873, 0.08905703506944393, -0.34471276695383624, 0.9316656260432552, 2.544128402031228e-06, 0.35667358245969444, 9.94806416901869e-07, 0.5716984080105472, 0.8122149766015274, 0.05343877126105434, 0.03226300167019085, 0.008738733750646484, 0.16523654448938638, -0.14997350840712748, 0.9723762784055443, 0.9832475652507039, 9.650500011374568e-10, 0.13533282578694794, 2.119730048813893e-08, 0.9920807184732219, 0.029333997542113896, -0.11721466626854155, -0.032715899662741924, 0.01734222029723367, -0.10807999477815826, 0.12506437159856992, 0.983988593507584, 0.9859655923294298, 1.7126990791409768e-09, 0.16856139907004927, 2.7169385380892787e-08, 0.974731696708031, -0.09026371582815532, -0.19160690342059378, -0.002399527740583097]], [[12.852359203051229, 89.12725986027148, -47.21326392884224, 0.09915881823214734, 0.6847882789900445, 0.6885549747639281, 0.14755655916413385, 0.9990908954203139, 0.01879478098477734, 0.016102321450771347, 0.00541631776874929, 1.0000000000000002, -2.1107143425671033e-09, -1.6131833575337553e-09, -5.993442116096267e-11, 0.9778874163319061, 0.010067297969168276, -0.2023404917913137, -0.003501183857461793, 0.995130964901081, -0.010868487022498452, 0.08876830141364894, -0.005994427686918342, -0.14919524636743822, -0.5835238062821542, 0.8423544291971669, 0.05087190484639846, 0.8262192277367412, 0.39221052507326765, 0.13539597873331938, 0.3713791829070375, 0.9452760155490122, 8.788474298480726e-07, 0.3251476014232924, 2.7241318548238013e-07, -0.7070705001422636, 0.7350141644543099, 0.05884210744336421, 0.008926990728898285, -0.17847592365085058, 0.5516567743753278, 0.8133528596965728, -0.007144229645014936, 0.8475817360146432, -0.3861101258508896, 0.08313468981385287, -0.3502982661343427, 0.9348457874814361, 1.9214982083113418e-06, 0.34712439006053325, 6.869882451938608e-07, 0.57011859262788, 0.8130057979073937, 0.04609304924584333, 0.029955262690039956, 0.00990906729858849, 0.15549024762678848, -0.1513992105431708, 0.9731685935118826, 0.9899406791522136, -2.498730272499946e-09, 0.1534086679833334, 2.439825293470455e-08, 0.9934916243630232, 0.03270399339694907, -0.08642013590286741, -0.009328099105716817, 0.03585986826559207, -0.08988707986906873, 0.13386593474836872, 0.9835948399318586, 0.9705360264329753, 1.7344504757689042e-09, 0.22636885700849746, 3.749103905104497e-08, 0.9801977367653067, -0.09167612965641267, -0.15371451950613285, -0.0016543988025125404]]]
      
        
    def test_inverse_time_pca(self):
        """ Test if the inverse temporal pca produces a strictly monotonously
            increasing vector using multiple samples
        """
        for s in xrange(self.number_of_samples):
            sample = np.ravel(self.mp.gmm.sample())
            gamma = sample[len(self.mp.s_pca["eigen_vectors"]):]
            t = self.mp._inverse_temporal_pca(gamma)
            if not np.all([t[i]>t[i-1] for i in xrange(len(t)) if i > 0]):
                print s,t
            assert not np.isnan(t).any()
            assert np.all([t[i]>t[i-1] for i in xrange(len(t)) if i > 0])
            assert t[-1] == self.mp.n_canonical_frames -1
            
            
        

#keep for unit test
#from lib.bvh import *
#    skeleton_file = "lib\\skeleton.bvh"
#    out_file = "test.bvh"
#    reader = BVHReader(skeleton_file)
#
#    test_file = 'walk_leftStance_quaternion_mm.json'
#
#    m = MotionPrimitive(test_file)
#    low_dim = np.ravel(m.gmm.sample())
#    
#    coefs = m._inverse_spatial_pca(low_dim[:m.s_pca["n_components"]])
#    
#    coefs_r = numpy2ri.numpy2ri(coefs)
#    fd = robjects.r['fd']
#    newfd = fd(coefs_r, m.s_pca["basis_function"])
#    
#    fdeval = robjects.r['eval.fd']
#    t = robjects.r('seq(0,46)')
#    newframes =np.array(fdeval(t, newfd))
#    oldshape =  newframes.shape
#    BVHWriter(out_file,reader,newframes.reshape((oldshape[0],oldshape[2]) ),\
#                                        0.013889,True)
