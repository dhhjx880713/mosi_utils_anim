# -*- coding: utf-8 -*-
"""
Created on Wed Mar 04 17:15:22 2015

Implements functions used for the processing of the constraints from the input file
generated by CNL processing.

@author: erhe01
"""


import collections
import numpy as np
from utilities.io_helper_functions import load_json_file
from splines.parameterized_spline import ParameterizedSpline, plot_splines

def transform_point_from_cad_to_opengl_cs(point):
    """ Transforms a 3d point represented as a list from left handed to the 
        right handed coordinate system
    """

    transform_matrix = np.array([[1,0,0],[0,0,1],[0,-1,0]])
    return np.dot(transform_matrix,point).tolist()

def transform_unconstrained_indices_from_cad_to_opengl_cs(unconstrained_indices):
    new_indices = []
    for i in unconstrained_indices:
        if i == 0:
            new_indices.append(i)
        elif i == 1:
            new_indices.append(2)
        elif i == 2:
            new_indices.append(1)
    return new_indices
    
    
def cgkit_mat_to_numpy4x4(matrix):
    """ Converts to cgkit matrix a numpy matrix  """
    return np.array(matrix.toList(), np.float32).reshape(4,4)    

def transform_point(transformation_matrix,point):
    """ Transforms a 3d point represented as a list by a numpy transformation
    
    Parameters
    ----------
    *transformation_matrix: np.ndarray
    \tHomogenous 4x4 transformation matrix
    *point: list
    \tCartesian coordinates
    
    Returns
    -------
    * point: list
    \tThe transformed point as a list
    """
    return np.dot(transformation_matrix,np.array(point+[1,]))[:3].tolist()   

        
   
def extract_trajectory_constraints(constraints_list,scale_factor= 1.0):
    """ Extracts the control points for trajectory constraints for a given action.
        Components containing None are set to 0, but marked as ignored in the unconstrained_indices list.
        Note all elements in constraints_list must have the same dimensions constrained and unconstrained.
    
    Parameters
    ----------
    * constraints_list : dict
      Elementary action list with constraints read from the json input file
    * action_index : integer
      Index of an entry in the elementary action
    * scale_factor : float
      Is applied on cartesian coordinates.

    Returns
    -------
    * control_points : dict of lists
      list of control points for each joint
    * unconstrained_indices : dict of lists
      indices that should be ignored
    """
    unconstrained_indices = {}
  
    #create a control point list that can be used as input for the ParameterizedSpline class   
    control_points = {}
    for entry in constraints_list:
        joint_name = entry["joint"]
        if "trajectoryConstraints" in entry.keys():
            assert len(entry["trajectoryConstraints"])>0  and "position" in entry["trajectoryConstraints"][0].keys()
           
            #extract unconstrained dimensions
            unconstrained_indices[joint_name] = []
            idx = 0
            for v in entry["trajectoryConstraints"][0]["position"]:
                if v == None:
                    unconstrained_indices[joint_name].append(idx)
                idx += 1            
            
            control_points[joint_name] = []
            for c in entry["trajectoryConstraints"]:
                point = [ p*scale_factor if p!= None else 0 for p in c["position"] ]# else 0  where the array is None set it to 0
                control_points[joint_name].append(point)
    return control_points, unconstrained_indices



