Morphable Graphs implementation
Developers:
Han Du*, Erik Herrmann*, Markus Mauer°, Martin Manns°, Fabian Rupp°
°Daimler AG
*DFKI GmbH

Python Dependencies:
 - Python 2.7.6.4 64 bit - WinPython is recommended, which already includes most of the other dependencies:  http://sourceforge.net/projects/winpython/files/WinPython_2.7/2.7.6.4/
 - NumPy + mkl > 1.8.1 - install the precompiled binaries available from http://www.lfd.uci.edu/~gohlke/pythonlibs
 - SciPy > 0.15.1 - install the precompiled binaries available from http://www.lfd.uci.edu/~gohlke/pythonlibs
 - sklearn > 0.14.1 - use "pip install sklearn"
 - cgkit 2.0.0 - install the precompiled binaries available from http://www.lfd.uci.edu/~gohlke/pythonlibs
 - rpy2 2.4.4 - install the precompiled binaries available from http://www.lfd.uci.edu/~gohlke/pythonlibs, requires R 3.0 or higher
 - GPy 0.6.1 - can be found in "dependencies.7z" on "https://redmine.viscenter.de/projects/motiongraph/files"
 - fk3.pyd + BOOST_PYTHON-VC110-MT-1_55.DLL (C++ implementation of analytic Forward Kinematics + FK-Jacobian provided by LMS)
                                           can be found in "dependencies.7z" on "https://redmine.viscenter.de/projects/motiongraph/files".
                                           Needs to be copied in the Python/DLLs directory
                                           Requires Microsoft Visual C++ 2012 SP1 Redistributable Package (x64)

 - tornado 4.0.2 - use "pip install tornado"
 - singledispatch 3.4.0.3 - download and install the whl file from https://pypi.python.org/pypi/singledispatch

R-Dependencies
 - R3.1.2 (download from http://cran.r-project.org/bin/windows/base/, set R_USER variable to your windows user name and R_HOME to the R installation path)
 - fda  (use package manager of R)


Instructions:

1. Download data necessary to run the algorithm which can be found on redmine:
https://redmine.viscenter.de/projects/motiongraph/files 
Required: 
 - motion_primitives_quaternion_PCA95.zip contains the motion model data. Copy it to any location.
Optionally: 
 - BestFitPipeline.zip contains the binary files of imk and DFKI LT necessary for CNL processing. Extract the contents to any location.
 - Animation Server.7z contains the animation server. Extract the contents to any location.

2. Modify the configuration files.
For the morphable graphs algorithm modify "config/service.json" 
In the field "model_data" specify the location of the motion model file without file ending 
In the field "transition_data" point to an empty directory. (Transition models 
are not necessary to run the algorithm and are currently experimental.)
In the field "input_dir" specify an input directory.
In the field "output_dir" specifiy an output directory.

Optionally: Please see the readme file of the BestFitPipeline for details on its configuration file. 
Make sure input directory and output directory match.


3. Run the algorithm
You can run the algorithm with or without using the BestFitPipeline.
In order to run it as part of the BestFitPipeline, please see the readme file of the BestFitPipeline.

There are two interfaces to run the algorithm without the BestFitPipeline:
mg_command_line_interface.py - A simple command line interface without arguments.
It automatically loads the latest input file in the input directory specified in config\service.json.

mg_rest_interface.py - Starts a web server that provides the following REST interface localhost:port/run_morphablegraphs.
It can be called using a HTTP POST message with a string containing the input file as message body.

An input file is generated by the BestFitPipeline based on the CNL breakdown.
An example can be found in ..\test_data\mg_input.json and used to run
the algorithm without the pipeline.


Current limitations:
 - Only one trajectory constraint can be specified for each elementary action.

4. Motion Primitive Construction
Set the path to data folder for modelling in config\service.json, "data_folder"
Call the motion primitive modelling pipeline mg_construction_pipeline.py from command line with parameters elementary_action motion_primitive
E.g.: python mg_construction_pipeline walk rightStance



Information about important algorithm configuration options:

1. general settings
use_constraints - If set to false, a random motion for the given elementary actions is generated
debug_max_step - if > 0, it forces the algorithm to stop and output the motion after this fixed number of motion primitives
local_optimization_mode -  Used to activate/deactivate local optimization for a single motion primitive and select the constraint set.
                           Possible values are as follows
                           "none": only use random sampling or the cluster search
                           "keyframes": only optimize the keyframe constraints and ignore trajectory constraints
                           "all": optimize trajectory and keyframe constraints
use_global_spatial_optimization - Optimize spatial constraints over graph walk
use_global_time_optimization - Optimize time constraints over graph walk, if they are found
activate_cluster_search - If active, a space partitioning data structure is used for a directed search instead of random sampling
n_cluster_search_candidates - If cluster search is active, sets the number of candidates that are kept at every level of the space partitioning structure in order to avoid local minima
use_collision_avoidance_constraints - If active, annotated trajectories from collision avoidance are optimized separately, otherwise they are ignored
use_transition_model - If active, the algorithm will try to load a Gaussian Process regression model to predict parameters at transitions between motion primitives
use_constrained_gmm -  If active and cluster search is deactivated a constrained GMM is created on run time for each motion primitive and used for sampling.
                       If transition models are used they are multiplied with predicted distributions from the Gaussian Process regression models.

2. smoothing_settings
spatial_smoothing - Applies smoothing at transitions of motion primitives
time_smoothing - Applies smoothing on time functions of individual motion primitives

3. trajectory_following_settings
spline_type - Defines how trajectory constraints are evaluated. Possible values are 0 for Catmull-Rom and 1 for BSpline (which in this implementation does not go through every control point)

4. local/global/time optimization settings
method -  supported methods are "leastsq", "BFGS" and "Nelder-Mead"
max_steps - Only for global and time optimization. Sets the number of steps in the graph walk that are optimized when looking back from the current step.


